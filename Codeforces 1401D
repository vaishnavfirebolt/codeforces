package day24;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.PriorityQueue;
import java.util.StringTokenizer;
 
public class Codeforces1401D {
	@SuppressWarnings("unchecked")
	public static void main(String[] args) {
		FastScanner scan=new FastScanner();
		PrintWriter out=new PrintWriter(System.out);
		
		int t=scan.nextInt();
		for(int tt=0;tt<t;tt++) {
			PriorityQueue<Long> traffic=new PriorityQueue<>(Collections.reverseOrder());
			
			int n=scan.nextInt();
			a=new ArrayList[n];
			for(int i=0;i<n;i++) a[i]=new ArrayList<>();
			
			for(int i=0;i<n-1;i++) {
				int u=scan.nextInt()-1, v=scan.nextInt()-1;
				a[u].add(v);
				a[v].add(u);
			}
			int f=scan.nextInt();
			PriorityQueue<Long> fac=new PriorityQueue<>(Collections.reverseOrder());
			
			for(int i=0;i<f;i++) fac.offer(scan.nextLong());
			int combine=f-(n-1);
			while(fac.size()<n-1) fac.offer(1L);
			
			long best=-1;
			
			if(combine>0) {
				best=fac.poll();
				while(combine>0) {
					long x=fac.poll();
					best=(best*x)%MOD;
					combine--;
				}
			}
			
			size=new long[n];
			init(0,-1);
			
			for(int i=1;i<n;i++) {
				traffic.offer((size[i]*(n-size[i])));
			}
			long res=0L;
			boolean start=false;
			
			while(!traffic.isEmpty()) {
				long x;
				if(!start&&best!=-1) {
					start=true;
					x=best;
				}
				else {
					x=fac.poll();
				}
				res=(res+(x*traffic.poll()%MOD)%MOD)%MOD;
			}
			out.println(res);
		}
		out.close();
	}
	static final int MOD=1_000_000_007;
	static long[] size;
	public static long init(int at, int prev) {
		size[at]=1;
		for(int nxt:a[at]) {
			if(nxt==prev) continue;
			size[at]+=init(nxt,at);
		}
		return size[at];
	}
	static ArrayList<Integer>[] a;
	public static long[] sort(long[] x) {
		ArrayList<Long> y=new ArrayList<>();
		for(int i=0;i<x.length;i++) y.add(x[i]);
		Collections.sort(y);
		
		long[] res=new long[x.length];
		for(int i=0;i<x.length;i++) res[i]=y.get(i);
		return res;
	}
	static class FastScanner {
		BufferedReader br;
		StringTokenizer st;
 
		public FastScanner() {
			try	{
				br = new BufferedReader(new InputStreamReader(System.in));
				st = new StringTokenizer(br.readLine());
			} catch (Exception e){e.printStackTrace();}
		}
 
		public String next() {
			if (st.hasMoreTokens())	return st.nextToken();
			try {st = new StringTokenizer(br.readLine());}
			catch (Exception e) {e.printStackTrace();}
			return st.nextToken();
		}
 
		public int nextInt() {return Integer.parseInt(next());}
 
		public long nextLong() {return Long.parseLong(next());}
 
		public double nextDouble() {return Double.parseDouble(next());}
 
		public String nextLine() {
			String line = "";
			if(st.hasMoreTokens()) line = st.nextToken();
			else try {return br.readLine();}catch(IOException e){e.printStackTrace();}
			while(st.hasMoreTokens()) line += " "+st.nextToken();
			return line;
		}
	}
}
