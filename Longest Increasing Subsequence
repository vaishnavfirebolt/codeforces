package dynamicProgramming;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.StringTokenizer;
 
public class LongestIncreasingSubsequence {
	
	static int lis(int a[]) {
		int dp[] = new int[a.length];
		Arrays.fill(dp, 1);
		dp[0] = 1;
		for(int i = 1 ; i < a.length; i++) {
			for(int j = 0 ; j < i ; j++) {
				if(a[j] <= a[i]) {
					dp[i] = Math.max(dp[i], dp[j]+1);
				}
			}
		}
		return dp[a.length -1];
	}
	
	
	public static void main(String[] args) {
		FastScanner fs=new FastScanner();
		int n =fs.nextInt();
		int a[] = new int[n];
		a = fs.readArray(n);
		System.out.println(lis(a));
				
	}
	
	public void sort(int[] a) {
		ArrayList<Integer> l=new ArrayList<>();
		for (int i:a) l.add(i);
		Collections.sort(l);
		for (int i=0; i<a.length; i++) a[i]=l.get(i);
	}
	
	static class FastScanner {
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st=new StringTokenizer("");
		
		public String next() {
			while (!st.hasMoreElements())
				try {
					st=new StringTokenizer(br.readLine());
				} catch (IOException e) {
					e.printStackTrace();
				}
			return st.nextToken();
		}
		
		int nextInt() {
			return Integer.parseInt(next());
		}
		
		int[] readArray(int n) {
			int[] a=new int[n];
			for (int i=0; i<n; i++) a[i]=nextInt();
			return a;
		}
	}
 
}
