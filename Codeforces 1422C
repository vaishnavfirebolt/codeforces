import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.BigInteger;
import java.util.*;

public class C {
	
	static long mod = (long)1e9 + 7;
	
	public static void main(String[] args) {
		FastScanner sc = new FastScanner();
		char ch[] = sc.next().toCharArray();
		int a[] = new int[ch.length];
		for(int i = 0; i < ch.length ; i++) {
			a[i] = (char)(ch[ch.length -i -1] - '0');
		}
		long n = a.length;
		long ans = 0;
		long place = 1;
		long frontElements = n - 1;
		long backSum = 0;
		long multiple = 1;
		
		for(int i : a) {
			ans = add(ans, mul(i, mul(place , nc2(frontElements))));
			ans = add(ans,mul(i,backSum));
			
			backSum = add(backSum,mul(place,multiple));
			multiple = add(multiple,1);
			frontElements = add(frontElements,-1);
			place = mul(10,place);
		}
		System.out.println(ans);
		
		
	}	
	private static long nc2(long frontElements) {
		return add((frontElements*(frontElements+1)) / 2 , 0);
	}
	static long add(long a, long b) {
		return ((a+b)%mod+mod)%mod;
	}
	
	static long mul(long a, long b) {
		return ((a*b)%mod+mod)%mod;
	}
	static class FastScanner {
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st=new StringTokenizer("");
	
		public String next() {
			while (!st.hasMoreElements())
				try {
					st=new StringTokenizer(br.readLine());
				} catch (IOException e) {
					e.printStackTrace();
				}
			return st.nextToken();
		}
		
		int nextInt() {
			return Integer.parseInt(next());
		}

		public long nextLong() {return Long.parseLong(next());}
 
		public double nextDouble() {return Double.parseDouble(next());}
		
		int[] readArray(int n) {
			int[] a=new int[n];
			for (int i=0; i<n; i++) a[i]=nextInt();
			return a;
		}
	}
}
