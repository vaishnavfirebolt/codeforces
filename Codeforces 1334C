import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;
 
public class B {
	
	final static int MAXN = 100_005;
	final static long MOD = (long) 1e9 + 7;
 
	public static void main(String[] args) {
		FastScanner sc = new FastScanner();
		StringBuilder sb = new StringBuilder();
		int t = sc.nextInt();
		for(int tt= 0;tt<t ;tt++) {
		 int n = sc.nextInt();
         long[][] m = new long[n][2];
         long[] a = new long[n];
         long[] b = new long[n], prefixB = new long[n], suffixB = new long[n];
         for(int i = 0; i < n; i++) {
             for(int j = 0; j < 2; j++) m[i][j] = sc.nextLong();
         }
         for(int i = 0; i < n; i++) {
             a[i] = m[i][0];
             int prev = (i - 1 + n) % n;
             b[i] = Math.max(0, m[i][0] - m[prev][1]);
         }
         for(int i = 0; i < n; i++) {
             prefixB[i] = b[i];
             if(i > 0) prefixB[i] += prefixB[i - 1];
         }
         for(int i = n - 1; i >= 0; i--) {
             suffixB[i] = b[i];
             if(i < n - 1) suffixB[i] += suffixB[i + 1];
         }
         long best = Long.MAX_VALUE;
         for(int i = 0; i < n; i++) {
             long curr = a[i];
             if(i < n - 1) curr += suffixB[i + 1];
             if(i > 0) curr += prefixB[i - 1];
             best = Math.min(best, curr);
         }
         sb.append(best+"\n");
		}	
		System.out.println(sb);
	}
	
	public static void sort(int[] a) {
		ArrayList<Integer> l=new ArrayList<>();
		for (int i:a) l.add(i);
		Collections.sort(l);
		for (int i=0; i<a.length; i++) a[i]=l.get(i);
	}

    public static long[] factorial;
 
    public static void setFactorial() {
        factorial = new long[MAXN];
        factorial[0] = 1;
        for (int i = 1; i < MAXN; ++i) factorial[i] = factorial[i - 1] * i % MOD;
    }
 
    public static long getFactorial(int n) {
        if (factorial == null) setFactorial();
        return factorial[n];
    }
 
    public static long ncr(int n, int r) {
        if (r > n) return 0;
        if (factorial == null) setFactorial();
        long numerator = factorial[n];
        long denominator = factorial[r] * factorial[n - r] % MOD;
        return numerator * pow(denominator, MOD - 2, MOD) % MOD;
    }
 
    public static long gcd(long a, long b) {
        return b == 0 ? a : gcd(b, a % b);
    }
 
    public static int gcd(int a, int b) {
        return b == 0 ? a : gcd(b, a % b);
    }
    public static long pow(long base, long exp, long MOD) {
        base %= MOD;
        long ret = 1;
        while (exp > 0) {
            if ((exp & 1) == 1) ret = ret * base % MOD;
            base = base * base % MOD;
            exp >>= 1;
        }
        return ret;
    }
 
 
    public static long max(long... ar) {
        long ret = ar[0];
        for (long itr : ar) ret = Math.max(ret, itr);
        return ret;
    }
 
    public static int max(int... ar) {
        int ret = ar[0];
        for (int itr : ar) ret = Math.max(ret, itr);
        return ret;
    }
 
    public static long min(long... ar) {
        long ret = ar[0];
        for (long itr : ar) ret = Math.min(ret, itr);
        return ret;
    }
 
    public static int min(int... ar) {
        int ret = ar[0];
        for (int itr : ar) ret = Math.min(ret, itr);
        return ret;
    }
 
 
    public static long sum(long... ar) {
        long sum = 0;
        for (long itr : ar) sum += itr;
        return sum;
    }
 
    public static long sum(int... ar) {
        long sum = 0;
        for (int itr : ar) sum += itr;
        return sum;
    }
	
	static class FastScanner {
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st=new StringTokenizer("");
		
		public String next() {
			while (!st.hasMoreElements())
				try {
					st=new StringTokenizer(br.readLine());
				} catch (IOException e) {
					e.printStackTrace();
				}
			return st.nextToken();
		}
		
		int nextInt() {
			return Integer.parseInt(next());
		}
		
		long nextLong() {
			return Long.parseLong(next());
		}
		
		int[] readArray(int n) {
			int[] a=new int[n];
			for (int i=0; i<n; i++) a[i]=nextInt();
			return a;
		}
	}
 
}


