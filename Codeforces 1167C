
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Codeforces1167C {
	
	static final int max = (int)5e5 + 5;
	
	static List groups[] = new List[max];
	static List member[] = new List[max];
	static boolean visited[] = new boolean[max];
	static boolean done[] = new boolean[max];
	static List<Integer> gather = new ArrayList<>();
	static int[] ans = new int[max];
	
	
	
	static void dfs(int a) {
		if(visited[a] == false) {
			gather.add(a);
			visited[a] = true;
			List<Integer> list = member[a];
			for(int item : list) {
				if(!done[item]) {
					done[item] = true;
					List<Integer> list1 = groups[item];
					for(int i : list1) {
						if(!visited[i]) {
						dfs(i);
						}
					}
				}
			}
		}
	}
	
	public static void main(String[] args) {
		FastScanner sc = new FastScanner();
		
		StringBuilder sb = new StringBuilder();
		
		int n = sc.nextInt() , m = sc.nextInt();
		
		

		for(int i = 0 ; i <= n ; i++) {
			member[i] = new ArrayList<Integer>();
		}
		for(int i = 0 ; i <= n ; i++) {
			groups[i] = new ArrayList<Integer>();
		}
		for(int i = 1 ; i <= m ; i++) {
			int k = sc.nextInt();
			groups[i] = new ArrayList<Integer>();
			for(int j =0 ; j < k ; j++) {
				int p = sc.nextInt();
				groups[i].add(p);
				member[p].add(i);
			}
		}
		for(int i = 1 ; i <= n ; i++) {
			if(visited[i] == false) {
				dfs(i);
				for(int o : gather) {
					ans[o] = gather.size();
				}
				gather.clear();
			}
		}
		
		for(int i =1 ; i <= n ; i++) {
			sb.append(ans[i] + " ");
		}
		System.out.println(sb);
		
	}
	
	static class FastScanner {
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st=new StringTokenizer("");
		
		public String next() {
			while (!st.hasMoreElements())
				try {
					st=new StringTokenizer(br.readLine());
				} catch (IOException e) {
					e.printStackTrace();
				}
			return st.nextToken();
		}
		
		int nextInt() {
			return Integer.parseInt(next());
		}
		
		long nextLong() {
			return Long.parseLong(next());
		}
		
		int[] readArray(int n) {
			int[] a=new int[n];
			for (int i=0; i<n; i++) a[i]=nextInt();
			return a;
		}
	}
}

